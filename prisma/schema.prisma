// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    // url      = "file:database.db"
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? //@db.Text
    refresh_token_expires_in Int
    access_token             String? //@db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? //@db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    wallets      Wallet[]
    transactions Transaction[]
    wishlists    Wishlist[]
    WishlistItem WishlistItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Category {
    id   String @id @default(cuid())
    name String

    color   String
    iconUrl String

    // user   User   @relation(fields: [userId], references: [id])
    // userId String

    WishlistItem WishlistItem[]
    Transaction  Transaction[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("categories")
}

enum WalletType {
    SPENDING
    SAVINGS
    WISHLIST
    RECURRING
}

model Wallet {
    id   String @id @default(cuid())
    name String

    color String

    type WalletType @default(SPENDING)

    user   User   @relation(fields: [userId], references: [id])
    userId String

    Transactions Transaction[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("wallets")
}

enum TransactionType {
    PAYMENT
    INCOME
    // RECURRING_PAYMENT
}

enum TransactionStatus {
    PENDING
    SUCCESS

    // RECURRING_PAYMENT
    @@map("TransactionState")
}

model Transaction {
    id   String @id @default(cuid())
    name String

    amount Float

    type   TransactionType   @default(PAYMENT)
    status TransactionStatus @default(SUCCESS)

    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?

    wallet   Wallet @relation(fields: [walletId], references: [id])
    walletId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("transactions")
}

model Wishlist {
    id   String @id @default(cuid())
    name String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    WishlistItem WishlistItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("wishlists")
}

model WishlistItem {
    id   String @id @default(cuid())
    name String

    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?

    wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
    wishlistId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("wishlist_items")
}
